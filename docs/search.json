[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bienvenidos al curso",
    "section": "",
    "text": "En esta breve página web que hemos preparado trataremos de exponer de forma clara y sencilla las ventajas que supone trabajar con lenguajes de programación (como son R y Python) para la investigación e innovación en el área sanitaria. Esta misma página se encuentra realiza bajo el Framework Quarto disponible para su uso tanto en R como en Python.\n\n\n\n\n\n\n¿Que es R?\n\nR en un lenguaje de programación de uso libre y colaborativo centrado en el análisis estadístico creado en el año 1995 con una versión estable para el uso por el público general en el año 2000.\nEn la actualidad se encuentra entre los 20 lenguajes de programación mas utilizados y dispone de conexión con otros lenguajes de programación como son Python, SQL, HTML, CSS o JavaScript.\n\n\n\n\n\n¿Que es Python?\n\nPython es un lenguaje de programación de uso libre y colaborativo multiproposito que tiene sus orígenes a finales de la década de 1980 y principios de 1990.\nEn la actualidad se encuentra entre los 20 lenguajes de programación mas utilizados y dispone de conexión con otros lenguajes de programación como son R, SQL, HTML, CSS o JavaScript.\n\n\n\n\n\nLa importancia de su uso\n\nEn la actualidad, tanto R como Python representan los motores ‘’Gold standar’’ para la producción científica, siendo utilizados de forma profesional tanto por el sector privado como por el sector público en escenarios tan diversos como investigación física, matemática, economía o salud.\nR se encuentra centrado en el análisis estadístico y Python representa un lenguaje más amplio con capacidad para la programación en robótica, creación de páginas web… Sin embargo, durante los últimos años, se han desarrollado en R herramientas que van más allá del análisis estadístico, encontrando también desarrollo de herramientas para la adquisición y gestión de la información así como la difusión de los resultados.\nDurante esta breve sesión encontraremos ejemplos de los diversos usos de los lenguajes de programación así como de las herramientas a usar para optimizar el flujo de trabajo con ellos. Dispondréis de la siguiente información:\n\nHerramientas para la optimización del flujo de trabajo\n\nEn esta sección explicaremos de forma breve la base de la programación así como los programas de Uso libre y gratuito que optimizan el flujo de trabajo con ambos lenguajes.\n\nHerramientas para la recogida de datos y su gestión\n\nEn esta sección explicaremos de forma breve las herramientas que los lenguajes disponen para la recogida de datos y su gestión; haciendo para ello uso de la integración con otros lenguajes de programación destinados a la gestión del dato (SQL y no solo SQL).\n\nAnálisis estadísticos y creación de algoritmos\n\nEn esta sección explicaremos de forma breve las capacidades de los lenguajes para la realización de análisis estadísticos avanzados, análisis geo-espaciales, minería de texto, redes neuronales, algoritmos no supervisados… A su vez, explicaremos otros usos que los lenguajes pueden llegar a tener.\n\nDifusión del conocimiento\n\nEn esta sección explicaremos de forma breve las herramientas que los lenguajes disponen para difundir el conocimiento. Desde la creación de páginas web (como la que se presenta), creación de presentaciones y/o la integración con el lenguaje Latex de creación de texto de alta calidad.\n\n\n\n¿Estás preparado/a?\n\n\n¡Comencemos!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    x &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n      breaks = bins, col = \"#75AADB\", border = \"white\",\n      xlab = \"Waiting time to next eruption (in mins)\",\n      main = \"Histogram of waiting times\"\n    )\n  })\n}\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "docs/About.html",
    "href": "docs/About.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#importancia-de-los-lenguajes-de-programación",
    "href": "index.html#importancia-de-los-lenguajes-de-programación",
    "title": "Bienvenidos al curso",
    "section": "Importancia de los lenguajes de programación",
    "text": "Importancia de los lenguajes de programación\nEn la actualidad, el lenguaje de programación de R representa junto con Python los motores de ‘’Gold standar’’ para la producción científica, siendo utilizado de forma profesional tanto por el secto privado como por el sector público en escenarios tan diversos como investigación física, matemáticas, economía o salud.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    x &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n      breaks = bins, col = \"#75AADB\", border = \"white\",\n      xlab = \"Waiting time to next eruption (in mins)\",\n      main = \"Histogram of waiting times\"\n    )\n  })\n}\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "Gestion_dato.html",
    "href": "Gestion_dato.html",
    "title": "La gobernanza del dato",
    "section": "",
    "text": "Gestión del dato\nEn cualquier estudio de investigación o innovación la calidad de la información que se obtiene es de vital importancia, así como las herramientas que se utilizan para guardar dicha información debido principalmente a su seguridad.\nPor definición, una base de datos es:\n\nUna colección organizada de información que se almacena electrónicamente para facilitar su acceso, gestión y actualización. Se trata de un sistema que permite almacenar, recuperar y manipular datos de manera eficiente, utilizando un software llamado sistema de gestión de bases de datos (DBMS)\n\nPor lo general, podemos definir las bases de datos actuales en dos categorías:\n\nBases de datos SQL: Organizan la información en tablas.\n\nActualmente, la base de datos mas popular para ello es MySQL. Para poder conectar y gestionar la información tanto R como Python disponen de formas sencillas de integrarse. A continuación te presentamos un ejemplo de ello:\n\n# Habilitamos las librerías que utilizaremos\nlibrary(DBI)\nlibrary(RMySQL)\n\n# Establecemos la conexión\ndb &lt;- dbConnect(RMySQL::MySQL(),\n  user = \"tu_nombre_usuario\",\n  password = \"tu_contraseña\",\n  host = \"tu_host\",\n  port = 3306,\n  dbname = \"nombre_de_tu_base_de_datos\"\n)\n\n# Ejecutamos una consulta de ejemplo\nresultado &lt;- dbGetQuery(db, \"SELECT * FROM tu_tabla LIMIT 5\")\n\n# Cerramos la conexión cuando hayas terminado\ndbDisconnect(db)\n\nTambién podemos hacer uso de bases SQL de forma local con SQLite. A continuación te presentamos un ejemplo:\n\n# Habilitamos las librerías que utilizaremos\nlibrary(DBI)\nlibrary(RSQLite)\n\n# Conectamos la base de datos\ndb &lt;- dbConnect(RSQLite::SQLite(), \"biblioteca.sqlite\")\n\n# Creamos una tabla\ndbExecute(db, \"\n  CREATE TABLE IF NOT EXISTS libros (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    titulo TEXT NOT NULL,\n    autor TEXT NOT NULL,\n    anio INTEGER\n  )\n\")\n\n# Insertamos datos\nlibros &lt;- data.frame(\n  titulo = c(\"El Quijote\", \"Cien años de soledad\", \"1984\"),\n  autor = c(\"Miguel de Cervantes\", \"Gabriel García Márquez\", \"George Orwell\"),\n  anio = c(1605, 1967, 1949)\n)\n\ndbWriteTable(db, \"libros\", libros, append = TRUE)\n\n# Cerramos la conexión\ndbDisconnect(db)\n\n\nBases de datos No solo SQL: Organizan la información de forma dinámica.\n\nActualmente, una de las bases de datos no solo SQL mas populares es MongoDB. Esta se utiliza cuando la información no puede ser estructurada en tablas. Por supuesto, ambos lenguajes son capaces de conectarse y utilizar estas bases de datos. Aquí tienes un ejemplo:\n\n# Habilitamos la librería que utilizaremos\nlibrary(mongolite)\n\n# Conectamos con a MongoDB\nconexion &lt;- mongo(collection = \"usuarios\", db = \"mi_base_de_datos\", url = \"mongodb://localhost:27017\")\n\n# Insertamos un documento\nnuevo_usuario &lt;- list(\n  nombre = \"Ana\",\n  edad = 28,\n  email = \"ana@ejemplo.com\"\n)\nconexion$insert(nuevo_usuario)\n\n# Cerramos la conexión\nrm(conexion)\n\n\n\nLa obtención de la información\nPor supuesto, antes de gestionar la información debemos obtenerla. Normalmente lo solemos realizar a través de Cuadernos de Recogida de Datos a papel que luego son mecanizados a ordenador (en un excel por ejemplo). Nuestros lenguajes de programación nos permiten realizar Programas informáticos de recogida de datos. Formularios a medida con todo aquello que necesitamos.\nComo ejemplo os presentamos el framework shiny, disponible en R y Python, para la creación rápida de programas informáticos. A continuación disponéis de un ejemplo:\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny);library(bslib)\nui &lt;- fluidPage(theme = bs_theme(preset = \"shiny\"),\n  titlePanel(\"Formulario de contacto\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"edad\",\"¿Que edad tiene?\", value = NULL, min = 0, max = 99),\n      sliderInput(\"altura\",\"¿Cuanto mide?\", min = 130, max = 250, value = 200),\n      radioButtons(\"comida\",\"¿Le gusta la comida china?\", choices = c(\"Sí\",\"No\"), inline = T),\n      conditionalPanel(\n        condition = \"input.comida == 'Sí'\",\n        selectInput(\"tipo\",\"¿Que plato le gusta?\", choices = list(\"Arroz tres delicias\",\"Pato a lo        cantonés\"))\n      ),\n      actionButton(\"guardar\",\"Guardar mis datos\")\n      \n    ),\n    mainPanel(\n      wellPanel(\n        tags$h3(\"Sus datos\"),\n        tags$hr(),\n        textOutput(\"edadMostrada\"),\n        textOutput(\"alturaMostrada\"),\n        textOutput(\"chinaMostrada\"),\n        conditionalPanel(\n          condition = \"input.comida == 'Sí'\",\n          textOutput(\"comidaMostrada\")\n        )\n        \n      )\n    )\n  )\n)\nserver &lt;- function(input, output) {\n  observeEvent(input$guardar,{\n    output$edadMostrada &lt;- renderText({\n      paste(\"Su edad es:\", input$edad)\n    })\n    output$alturaMostrada &lt;- renderText({\n      paste(\"Su altura es:\", input$altura)\n    })\n    output$chinaMostrada &lt;- renderText({\n      paste(input$comida,\"le gusta la comida china\")\n    })\n    output$comidaMostrada &lt;- renderText({\n      paste(\"A usted le gusta el:\", input$tipo)\n    })\n  })\n  \n  \n}\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "interfaz_trabajo.html",
    "href": "interfaz_trabajo.html",
    "title": "Entornos de Desarrollo Integrado",
    "section": "",
    "text": "Trabajar directamente con la consola de programación puede resultar complejo e ineficiente. Por ello, en la actualidad contamos con programas informáticos que actúan de interfaces de trabajo (Entornos de Desarrollo Integrado, IDE). Estas IDE nos permiten trabajar con varios tipos de archivos a la vez y nos ofrecen utilidades como son:\n\nDocumentación de apoyo para las funciones de trabajo de los lenguajes.\nGestión eficiente de los archivos y documentos con lo que trabajemos.\nCreación de texto de programación.\nVisualización de los resultados obtenidos (pestañas con gráficos, documentos, html…)\n\nAunque existen varias IDE nosotros os presentaremos 3 de ellas bastante conocidas y ampliamente utilizadas de forma profesional: Rstudio, PyCharm y Visual Studio\n\nRstudio\nLa IDE Rstudio se encuentra diseñada por la empresa POSIT. Es carácter de código abierto y completamente gratuito. Puede ser descargado tanto para Windows como IOS o Ubuntu.\nIdeado principalmente para el lenguaje de programación R y posteriormente Python, permite trabajar con numerosos lenguajes de programación al mismo tiempo (html, javaScript, css, SQL…). A su vez, dispone de editores para la creación de documentación de alta calidad a través de Latex.\n\n\n\nVisualización de R studio.\n\n\n\n\n\nPycharm\nLa IDE de Pycharm se encuentra diseñada por JETBRAINS. Aunque su versión profesional es de acceso por subscripción, dispone de una versión de código abierto y completamente gratuido como es Pycharm Community Edition.\nIdeada principalmente para el lenguaje de programción de Python. A día de hoy también permite la integración con otros lenguajes de programación.\n\n\n\nVisualización de pyCharm.\n\n\n\n\n\nVisual Studio\nLa IDE de Visual Studio se encuentra creada por la empresa Microsoft. Existe una versión completamente gratuita.\nSe trata de una IDE multiplataforma, es decir, es capaz de integrar diversos lenguajes de programación. Su principal objetivo es servir de IDE para la creación de aplicaciones y páginas web.\n\n\n\nVisualización de Visual Studio."
  },
  {
    "objectID": "flujo_trabajo.html",
    "href": "flujo_trabajo.html",
    "title": "Flujo de trabajo",
    "section": "",
    "text": "Si nunca hemos trabajado con lenguajes de programación puede resultar complicado e incluso desafiante hacer uso de estas herramientas. Sin embargo, una vez entendida la lógica con la que trabajan encontrareis como las capacidades de estas herramientas superan con crees sus inconvenientes (que únicamente suele ser la curva de aprendizaje que necesitan).\nPor ello, para utilizar correctamente estas herramientas ante es necesario conocer, de forma básica, su funcionamiento; objetivo de esta breve sección."
  },
  {
    "objectID": "flujo_trabajo.html#órdenes-a-instalar",
    "href": "flujo_trabajo.html#órdenes-a-instalar",
    "title": "Flujo de trabajo",
    "section": "Órdenes a instalar",
    "text": "Órdenes a instalar\nLas ordenes a instalar suele venir compactadas en unos archivos llamado Librerías. Cada librería tiene un objetivo (tendremos algunas especializadas en manipular datos, otras en análisis estadísticos básicos, otras en minerías de texto…). Las librerías suelen ser realizadas de forma general por científicos (como tú) que desarrollan un procedimiento y lo “donan” al público para que todo el mundo pueda hacer uso de él (el modelo Open Science).\nA continuación vamos a instalar una librería que se llama DescTools (que dispone de ordenes para realizar el análisis descriptivo de los datos) y vamos a describir los datos que disponemos utilizando sus comandos:\n\n# Verificamos si DescTools está instalada; si no, se instala\nif (!require(\"DescTools\")) {\n  install.packages(\"DescTools\")\n  library(DescTools)\n}\n\nCargando paquete requerido: DescTools\n\n# Ejemplo: Calculamos intervalo de confianza para una proporción binomial\nn_exitos &lt;- 50\nn_total &lt;- 100\n\n# Utilizamos la orden BinomCI() de la librería\n\nresultado &lt;- BinomCI(x = n_exitos, n = n_total, conf.level = 0.95, method = \"wilson\")\n\n# Mostramos el resultado\nprint(resultado)\n\n     est    lwr.ci    upr.ci\n[1,] 0.5 0.4038315 0.5961685\n\n\nSi no sabemos qué es lo que hace una orden podemos poner una interrogación antes de la orden y el ordenar buscará la información adjunta a dicha orden:\n\n?BinomCI()"
  },
  {
    "objectID": "flujo_trabajo.html#órdenes-propias",
    "href": "flujo_trabajo.html#órdenes-propias",
    "title": "Flujo de trabajo",
    "section": "Órdenes propias",
    "text": "Órdenes propias\nSi no encuentras una librería que tenga las órdenes que necesitas siempre pueden crearlas tu para luego utilizarlas. Aquí te mostramos un ejemplo de como se crearía la prueba de chi cuadrado de forma casera:\n\n# Función casera para la prueba chi-cuadrado\nchi_cuadrado_casera &lt;- function(tabla_observada) {\n  # Calcular totales de filas y columnas\n  totales_filas &lt;- rowSums(tabla_observada)\n  totales_columnas &lt;- colSums(tabla_observada)\n  total_general &lt;- sum(tabla_observada)\n  \n  # Calcular frecuencias esperadas\n  frecuencias_esperadas &lt;- outer(totales_filas, totales_columnas) / total_general\n  \n  # Calcular el estadístico chi-cuadrado\n  chi_cuadrado &lt;- sum((tabla_observada - frecuencias_esperadas)^2 / frecuencias_esperadas)\n  \n  # Calcular grados de libertad\n  grados_libertad &lt;- (nrow(tabla_observada) - 1) * (ncol(tabla_observada) - 1)\n  \n  # Calcular el valor p\n  valor_p &lt;- 1 - pchisq(chi_cuadrado, df = grados_libertad)\n  \n  # Crear y devolver el resultado\n  resultado &lt;- list(\n    estadistico = chi_cuadrado,\n    grados_libertad = grados_libertad,\n    valor_p = valor_p\n  )\n  \n  return(resultado)\n}\n\n# Ejemplo de uso\ntabla_ejemplo &lt;- matrix(c(30, 10, 20, 15), nrow = 2)\ncolnames(tabla_ejemplo) &lt;- c(\"Grupo A\", \"Grupo B\")\nrownames(tabla_ejemplo) &lt;- c(\"Categoría 1\", \"Categoría 2\")\nprint(tabla_ejemplo)\n\n            Grupo A Grupo B\nCategoría 1      30      20\nCategoría 2      10      15\n\n# Usar la función casera\nresultado_casero &lt;- chi_cuadrado_casera(tabla_ejemplo)\n\n# Imprimir resultados de la función casera\ncat(\"Valor p:\", resultado_casero$valor_p, \"\\n\\n\")\n\nValor p: 0.1017069 \n\n# Comparar con la función incorporada chisq.test()\nresultado_r &lt;- chisq.test(tabla_ejemplo, correct = F)\n\n# Imprimir resultados de chisq.test()\ncat(\"Resultados de chisq.test() de R:\\n\")\n\nResultados de chisq.test() de R:\n\nprint(resultado_r)\n\n\n    Pearson's Chi-squared test\n\ndata:  tabla_ejemplo\nX-squared = 2.6786, df = 1, p-value = 0.1017"
  },
  {
    "objectID": "estadistica.html",
    "href": "estadistica.html",
    "title": "Análisis estadísticos",
    "section": "",
    "text": "Una vez obtenidos los datos debemos analizarlos. Tanto R como Python incluyen librerías para el análisis estadístico como podrían realizarse en programas con los que estamos más familiarizados como son SPSS, Stagrapchis o Stata.\nSin embargo, como recordarás, nuestros lenguajes de programación son de código abierto y colaborativos. Gracias a esto, la versatilidad que tienen para incluir todo tipo de análisis estadísticos es muy alta. Cualquier procedimiento que se desarrolle puede ser escrito en una librería y ofrecido de forma gratuita para su uso en R y Python sin esperar a que las empresas correspondientes a los programas de análisis estadísticos clásicos los incluyan y hasta que la empresa proveedora (Osakidetza en este caso) los adquiera. Es decir, no existen intermediarios, las pruebas estadísticas van desde los desarrolladores hasta los usuarios.\nA continuación te mostramos algunos ejemplos de análisis estadísticos que puedes realizar con nuestros lenguajes de programación.\n\n\nAnálisis estadísticos clásicos\nPor supuesto, siempre podremos realizar análisis estadísticos clásicos. A continuación te mostramos algunos ejemplos:\n\n# ============================================\n# Análisis Estadístico en R - Ejemplo\n# ============================================\n\n# 1. Generamos de datos simulados\nset.seed(123) # Fijamos la semilla para reproducibilidad\n\n# Creamos dos grupos con datos simulados\ngrupo_A &lt;- rnorm(50, mean = 70, sd = 10) # Grupo A: media 70, desviación estándar 10\ngrupo_B &lt;- rnorm(50, mean = 75, sd = 12) # Grupo B: media 75, desviación estándar 12\n\n# Combinamos los datos en un dataframe\ndatos &lt;- data.frame(\n  Grupo = rep(c(\"A\", \"B\"), each = 50),\n  Valor = c(grupo_A, grupo_B)\n)\n\n# ============================================\n# 2. Análisis descriptivo\n# ============================================\n\n# Resumen estadístico general\nsummary(datos)\n\n    Grupo               Valor       \n Length:100         Min.   : 47.29  \n Class :character   1st Qu.: 66.42  \n Mode  :character   Median : 73.47  \n                    Mean   : 73.55  \n                    3rd Qu.: 79.57  \n                    Max.   :101.25  \n\n# Resumen por grupo\nlibrary(dplyr)\nresumen_por_grupo &lt;- datos %&gt;%\n  group_by(Grupo) %&gt;%\n  summarise(\n    Media = mean(Valor),\n    Mediana = median(Valor),\n    Desviacion_Estandar = sd(Valor),\n    Minimo = min(Valor),\n    Maximo = max(Valor)\n  )\nprint(resumen_por_grupo)\n\n# A tibble: 2 × 6\n  Grupo Media Mediana Desviacion_Estandar Minimo Maximo\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt;               &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 A      70.3    69.3                9.26   50.3   91.7\n2 B      76.8    76.8               10.9    47.3  101. \n\n# ============================================\n# 3. Visualización de datos\n# ============================================\n\nlibrary(ggplot2)\n\n# Boxplot para comparar los grupos\nggplot(datos, aes(x = Grupo, y = Valor, fill = Grupo)) +\n  geom_boxplot() +\n  labs(title = \"Comparación de Grupos\", x = \"Grupo\", y = \"Valor\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Histograma para cada grupo\nggplot(datos, aes(x = Valor, fill = Grupo)) +\n  geom_histogram(alpha = 0.6, position = \"identity\", bins = 15) +\n  labs(title = \"Distribución de Valores por Grupo\", x = \"Valor\", y = \"Frecuencia\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# ============================================\n# 4. Pruebas de hipótesis\n# ============================================\n\n# Prueba t de Student para comparar las medias de los dos grupos\nt_test &lt;- t.test(grupo_A, grupo_B)\nprint(t_test)\n\n\n    Welch Two Sample t-test\n\ndata:  grupo_A and grupo_B\nt = -3.1766, df = 95.593, p-value = 0.002007\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -10.42039  -2.40534\nsample estimates:\nmean of x mean of y \n 70.34404  76.75690 \n\n# Verificamos si los datos cumplen con la normalidad (Shapiro-Wilk test)\nshapiro_A &lt;- shapiro.test(grupo_A)\nshapiro_B &lt;- shapiro.test(grupo_B)\n\nprint(shapiro_A)\n\n\n    Shapiro-Wilk normality test\n\ndata:  grupo_A\nW = 0.98928, p-value = 0.9279\n\nprint(shapiro_B)\n\n\n    Shapiro-Wilk normality test\n\ndata:  grupo_B\nW = 0.99073, p-value = 0.9618\n\n# Verificamos la homogeneidad de varianzas (Prueba de Levene)\nlibrary(car)\nlevene_test &lt;- leveneTest(Valor ~ Grupo, data = datos)\nprint(levene_test)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  0.5309 0.4679\n      98               \n\n# ============================================\n# Resultados e interpretación\n# ============================================\ncat(\"\\nResultados del análisis:\\n\")\n\n\nResultados del análisis:\n\ncat(\"1. Resumen descriptivo:\\n\")\n\n1. Resumen descriptivo:\n\nprint(resumen_por_grupo)\n\n# A tibble: 2 × 6\n  Grupo Media Mediana Desviacion_Estandar Minimo Maximo\n  &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt;               &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 A      70.3    69.3                9.26   50.3   91.7\n2 B      76.8    76.8               10.9    47.3  101. \n\ncat(\"\\n2. Prueba t de Student:\\n\")\n\n\n2. Prueba t de Student:\n\nprint(t_test)\n\n\n    Welch Two Sample t-test\n\ndata:  grupo_A and grupo_B\nt = -3.1766, df = 95.593, p-value = 0.002007\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -10.42039  -2.40534\nsample estimates:\nmean of x mean of y \n 70.34404  76.75690 \n\ncat(\"\\n3. Normalidad (Shapiro-Wilk):\\n\")\n\n\n3. Normalidad (Shapiro-Wilk):\n\ncat(\"Grupo A: p-value =\", shapiro_A$p.value, \"\\n\")\n\nGrupo A: p-value = 0.9278568 \n\ncat(\"Grupo B: p-value =\", shapiro_B$p.value, \"\\n\")\n\nGrupo B: p-value = 0.9617732 \n\ncat(\"\\n4. Homogeneidad de varianzas (Levene):\\n\")\n\n\n4. Homogeneidad de varianzas (Levene):\n\nprint(levene_test)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  1  0.5309 0.4679\n      98               \n\n\n\n\n\nMetanaálisis\nNuestros lenguajes de programación también permiten realizar metaanalisis clásicos, en red, umbrella, metaregresiones… A continuación os dejamos un ejemplos básico:\n\n# Instalar y cargar el paquete metafor\nlibrary(metafor)\n\nWarning: package 'metafor' was built under R version 4.4.3\n\n\nCargando paquete requerido: Matrix\n\n\nCargando paquete requerido: metadat\n\n\nWarning: package 'metadat' was built under R version 4.4.3\n\n\nCargando paquete requerido: numDeriv\n\n\n\nLoading the 'metafor' package (version 4.8-0). For an\nintroduction to the package please type: help(metafor)\n\n\n\nAdjuntando el paquete: 'metafor'\n\n\nThe following object is masked from 'package:car':\n\n    vif\n\n# Crear un conjunto de datos de ejemplo\n# Supongamos que tenemos 5 estudios con tamaños de efecto (yi) y varianzas (vi)\ndata &lt;- data.frame(\n  study = c(\"Estudio 1\", \"Estudio 2\", \"Estudio 3\", \"Estudio 4\", \"Estudio 5\"),\n  yi = c(0.2, 0.5, -0.1, 0.3, 0.4),   # Tamaños de efecto\n  vi = c(0.04, 0.03, 0.05, 0.02, 0.04) # Varianzas\n)\n\n# Visualizar los datos\nprint(data)\n\n      study   yi   vi\n1 Estudio 1  0.2 0.04\n2 Estudio 2  0.5 0.03\n3 Estudio 3 -0.1 0.05\n4 Estudio 4  0.3 0.02\n5 Estudio 5  0.4 0.04\n\n# Realizar el meta-análisis (modelo de efectos aleatorios)\nmeta_result &lt;- rma(yi = yi, vi = vi, data = data, method = \"REML\")\n\n# Resumen de los resultados del meta-análisis\nprint(meta_result)\n\n\nRandom-Effects Model (k = 5; tau^2 estimator: REML)\n\ntau^2 (estimated amount of total heterogeneity): 0.0016 (SE = 0.0241)\ntau (square root of estimated tau^2 value):      0.0394\nI^2 (total heterogeneity / total variability):   4.42%\nH^2 (total variability / sampling variability):  1.05\n\nTest for Heterogeneity:\nQ(df = 4) = 5.0217, p-val = 0.2851\n\nModel Results:\n\nestimate      se    zval    pval   ci.lb   ci.ub      \n  0.2902  0.0829  3.5023  0.0005  0.1278  0.4527  *** \n\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# Crear un forest plot para visualizar los resultados\nforest(meta_result, slab = data$study)\n\n\n\n\n\n\n\n# Funnel plot para evaluar sesgos de publicación\nfunnel(meta_result)\n\n\n\n\n\n\n\n# Análisis de heterogeneidad\ncat(\"Heterogeneidad:\\n\")\n\nHeterogeneidad:\n\ncat(paste(\"Q =\", meta_result$QE, \", p =\", meta_result$QEp, \"\\n\"))\n\nQ = 5.02173913043478 , p = 0.28507418936044 \n\ncat(paste(\"I^2 =\", round(meta_result$I2, 2), \"%\\n\"))\n\nI^2 = 4.42 %\n\n\n\n\n\nAnálisis geoespaciales\nNuestros lenguajes de programación permiten realizar análisis geoespaciales, dándonos la capacidad de realizar estudios epidemiológicos complejos. A continuación os mostramos un ejemplo de ello:\n\n# Cargamos las bibliotecas necesarias\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Descargamos los datos geoespaciales del País Vasco\neuskadi &lt;- st_read(\"mapa/TERRITORIOS_5000_ETRS89.shp\")\n\nReading layer `TERRITORIOS_5000_ETRS89' from data source \n  `C:\\Users\\Aprai\\Desktop\\Trabajo\\Osakidetza\\R y Python en Osakidetza\\mapa\\TERRITORIOS_5000_ETRS89.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 463435.2 ymin: 4702192 xmax: 603082.2 ymax: 4811579\nProjected CRS: ETRS89 / UTM zone 30N\n\n# Creamos datos simulados de población\npoblacion_data &lt;- data.frame(\n  provincia = c(\"ARABA / ÁLAVA\", \"BIZKAIA\", \"GIPUZKOA\"),\n  poblacion = c(331549, 1159443, 727121)\n)\n\n# Unimos los datos de población con los datos geoespaciales\neuskadi_poblacion &lt;- euskadi %&gt;%\n  left_join(poblacion_data, by = c(\"TERRITORIO\" = \"provincia\"))\n\n# Creamos el mapa\nmapa_euskadi &lt;- ggplot(data = euskadi_poblacion) +\n  geom_sf(aes(fill = poblacion)) +\n  scale_fill_viridis_c(name = \"Población\", \n                       labels = scales::comma_format()) +\n  labs(title = \"Población por provincia en el País Vasco\",\n       subtitle = \"Datos simulados - 2025\",\n       caption = \"Fuente: Datos simulados\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5),\n        plot.subtitle = element_text(hjust = 0.5))\n\n# Mostramos el mapa\nprint(mapa_euskadi)\n\n\n\n\n\n\n\n\n\n\n\nMinería de texto\nEn la actualidad, la minería y análisis de texto se encuentra en auge debido a la información que se puede obtener. Nuestros lenguajes de programación también tienen la capacidad de realizar dichos análisis. A continuación te presentamos un pequeño ejemplo:\n\nlibrary(tm)\nlibrary(wordcloud)\nlibrary(RColorBrewer)\n\n# ============================================\n# 1. Crear un conjunto de datos de texto\n# ============================================\n\n# Ejemplo: textos simulados\ntextos &lt;- c(\n  \"El análisis de minería de texto permite extraer información útil de documentos.\",\n  \"Las nubes de palabras son una forma visual atractiva para representar frecuencias.\",\n  \"R es un lenguaje poderoso para realizar minería de texto y análisis estadístico.\",\n  \"La limpieza del texto es un paso fundamental antes del análisis.\",\n  \"Los algoritmos de minería de texto pueden identificar patrones en grandes volúmenes de datos.\"\n)\n\n# Crear un Corpus (estructura para manejar texto)\ncorpus &lt;- Corpus(VectorSource(textos))\n\n# ============================================\n# 2. Limpieza del texto\n# ============================================\n\ncorpus &lt;- corpus %&gt;%\n  tm_map(content_transformer(tolower)) %&gt;%    # Convertir a minúsculas\n  tm_map(removePunctuation) %&gt;%               # Eliminar puntuación\n  tm_map(removeNumbers) %&gt;%                   # Eliminar números\n  tm_map(removeWords, stopwords(\"spanish\")) %&gt;% # Eliminar palabras vacías (stopwords) en español\n  tm_map(stripWhitespace)                     # Eliminar espacios en blanco adicionales\n\n# ============================================\n# 3. Análisis de frecuencias\n# ============================================\n\n# Crear una matriz de términos (Term-Document Matrix)\ntdm &lt;- TermDocumentMatrix(corpus)\n\n# Convertir la matriz a un formato más manejable\nmatriz &lt;- as.matrix(tdm)\n\n# Calcular la frecuencia total de cada palabra\nfrecuencias &lt;- sort(rowSums(matriz), decreasing = TRUE)\n\n# Crear un dataframe con las palabras y sus frecuencias\ndf_frecuencias &lt;- data.frame(\n  palabra = names(frecuencias),\n  frecuencia = frecuencias\n)\n\nprint(head(df_frecuencias)) # Mostrar las palabras más frecuentes\n\n                palabra frecuencia\ntexto             texto          4\nanálisis       análisis          3\nminería         minería          3\ndocumentos   documentos          1\nextraer         extraer          1\ninformación información          1\n\n# ============================================\n# 4. Generar la nube de palabras\n# ============================================\n\nset.seed(123) # Fijar semilla para reproducibilidad\n\nwordcloud(\n  words = df_frecuencias$palabra,\n  freq = df_frecuencias$frecuencia,\n  min.freq = 1,                     # Frecuencia mínima para incluir palabras\n  max.words = 100,                  # Número máximo de palabras a mostrar\n  random.order = FALSE,             # Ordenar por frecuencia (no aleatorio)\n  colors = brewer.pal(8, \"Dark2\")   # Paleta de colores atractiva\n)\n\n\n\n\n\n\n\n# ============================================\n# Resultados e interpretación\n# ============================================\ncat(\"\\nLas palabras más frecuentes son:\\n\")\n\n\nLas palabras más frecuentes son:\n\nprint(head(df_frecuencias))\n\n                palabra frecuencia\ntexto             texto          4\nanálisis       análisis          3\nminería         minería          3\ndocumentos   documentos          1\nextraer         extraer          1\ninformación información          1\n\n\n\n\n\nRedes neuronales\nLos algoritmos de redes neuronales (muy utilizados en Inteligencia Artificial) se encuentran en nuestro día a día. Dichos algoritmos también se pueden realizar con nuestros lenguajes de programación. A continuación tienes un pequeño ejemplo:\n\nlibrary(nnet)\nlibrary(NeuralNetTools)\n\ndata(neuraldat) \nset.seed(123)\n\nmod &lt;- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 5)\n\n# weights:  26\ninitial  value 259.012592 \niter  10 value 0.986480\niter  20 value 0.225311\niter  30 value 0.139585\niter  40 value 0.098961\niter  50 value 0.038200\niter  60 value 0.022839\niter  70 value 0.013774\niter  80 value 0.008530\niter  90 value 0.005172\niter 100 value 0.003044\nfinal  value 0.003044 \nstopped after 100 iterations\n\nplotnet(mod)\n\n\n\n\n\n\n\n\n\n\n\n¡Esto no es el final!\n\n\nTe hemos mostrado algunos ejemplos de uso de nuestros lenguajes de programación. Sin embargo, existen mucho mas: técnicas de muestreo y remuestro, Algoritmo supervisados y no supervisados…"
  },
  {
    "objectID": "mas_usos.html",
    "href": "mas_usos.html",
    "title": "Otras utilidades",
    "section": "",
    "text": "Al tratarse de lenguajes de programación, el uso de R y Python no se limita únicamente al análisis estadístico. Aunque R se especializa en ello y Python es un lenguaje más amplio; también podemos utilizarlos para otros tipo de usos. A continuación te presentamos algunos de ellos."
  },
  {
    "objectID": "mas_usos.html#ejemplo-de-una-app",
    "href": "mas_usos.html#ejemplo-de-una-app",
    "title": "Otras utilidades",
    "section": "Ejemplo de una app",
    "text": "Ejemplo de una app\nA continuación os presentamos un pequeño ejemplo de una app realizada con shiny. Se trata de la escala de Braden:\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny); library(shinyWidgets); library(bslib); library(dplyr)\n\nui &lt;- fluidPage(theme = bs_theme(preset = \"shiny\"),\n                br(),\n                h3(\"Escala de Braden\"),\n                hr(),\n                wellPanel(radioGroupButtons(\n                    inputId = \"Sensorial\",\n                    label = \"Percepción sensorial\",\n                    choices = c(\"Completamente limitada\", \"Muy limitada\", \"Ligeramente limitada\",\"Sin limitaciones\"),\n                    direction = \"horizontal\",\n                    justified = T\n                  ),\n                  radioGroupButtons(inputId = \"Humedad\",\n                                    label = \"Exposición a al humedad\",\n                                    choices = c(\"Constantemente húmeda\", \"Húmeda con frecuencia\", \"Ocasionalmente húmeda\",\"Raramente húmeda\"),\n                                    direction = \"horizontal\",\n                                    justified = T\n                  ),radioGroupButtons(inputId = \"Actividad\",\n                                      label = \"Actividad\",\n                                      choices = c(\"Encamado\", \"En silla\", \"Deambula ocasionalmente\",\"Deambula frecuentemente\"),\n                                      direction = \"horizontal\",\n                                      justified = T\n                  ),\n                  radioGroupButtons(inputId = \"Movilidad\",\n                                    label = \"Movilidad\",\n                                    choices = c(\"Completamente inmovil\", \"Muy limitada\", \"Ligeramente limitada\",\"Sin limitaciones\"),\n                                    direction = \"horizontal\",\n                                    justified = T\n                  ),\n                  radioGroupButtons(inputId = \"Nutricion\",\n                                    label = \"Nutrición\",\n                                    choices = c(\"Muy pobre\", \"Probablemente inadecuada\", \"Adecuada\",\"Excelente\"),\n                                    direction = \"horizontal\",\n                                    justified = T\n                  ),\n                  radioGroupButtons(inputId = \"Riesgo_lesion\",\n                                    label = \"Riesgo de lesiones cutáneas\",\n                                    choices = c(\"Problema\", \"Problema potencial\", \"No existe problema aparente\"),\n                                    direction = \"horizontal\",\n                                    justified = T\n                  )\n                ),\n                  br(),\n                    wellPanel(\n                      h4(\"Resultado\"),\n                      fluidRow(\n                        column(6,h6(\"Resultado numérico\"),\n                               verbatimTextOutput(\"resultado\")),\n                        column(6,h6(\"Interpretación\"),\n                               uiOutput(\"interpretacion\"))\n                      )\n                    )\n                  )\n\nserver &lt;- function(input,output,session){\n  suma &lt;- reactiveVal(0)\n  observe({\n    sensorial &lt;- if_else(input$Sensorial == \"Completamente limitada\",1,\n                         if_else(input$Sensorial == \"Muy limitada\",2,\n                                 if_else(input$Sensorial == \"Ligeramente limitada\",3,4)))\n    humedad &lt;- if_else(input$Humedad == \"Constantemente húmeda\",1,\n                       if_else(input$Humedad == \"Húmeda con frecuencia\",2,\n                               if_else(input$Humedad == \"Ocasionalmente húmeda\",3,4)))\n    actividad &lt;- if_else(input$Actividad == \"Encamado\",1,\n                         if_else(input$Actividad == \"En silla\",2,\n                                 if_else(input$Actividad == \"Deambula ocasionalmente\",3,4)))\n    movilidad &lt;- if_else(input$Movilidad == \"Completamente inmovil\",1,\n                         if_else(input$Movilidad == \"Muy limitada\",2,\n                                 if_else(input$Movilidad == \"Ligeramente limitada\",3,4)))\n    nutricion &lt;- if_else(input$Nutricion == \"Muy pobre\",1,\n                         if_else(input$Nutricion == \"Probablemente inadecuada\",2,\n                                 if_else(input$Nutricion == \"Adecuada\",3,4)))\n    lesion &lt;- if_else(input$Riesgo_lesion == \"Problema\",1,\n                      if_else(input$Riesgo_lesion == \"Problema potencial\",2,3))\n    valor = sensorial + humedad + actividad + movilidad + nutricion + lesion\n    suma(valor)\n  })\n  output$resultado &lt;- renderText({\n    suma()\n  })\n  output$interpretacion &lt;- renderUI({\n    valor &lt;- suma()\n    inter &lt;- if_else(valor &lt; 12, \"Riesgo alto\",\n                     if_else(valor &lt;= 15, \"Riesgo medio\",\n                             if_else(valor &lt;= 18,\"Riesgo bajo\",\"Sin riesgo\")))\n    if (grepl(\"Riesgo alto\", inter)) { # Si contiene \"riesgobajo\"\n      tags$pre(style = \"color: red; font-weight: bold;\", inter )\n    } else {\n      if (grepl(\"Riesgo medio\", inter)) { # Si contiene \"riesgobajo\"\n        tags$pre(style = \"color: orange; font-weight: bold;\", inter )\n      } else {\n        if (grepl(\"Riesgo bajo\", inter)) { # Si contiene \"riesgobajo\"\n          tags$pre(style = \"color: #acaa0e; font-weight: bold;\", inter )\n        } else {\n          if (grepl(\"Sin riesgo\", inter)) { # Si contiene \"riesgobajo\"\n            tags$pre(style = \"color: green; font-weight: bold;\", inter )\n          }}}}\n  })\n  \n}\n\nshinyApp(ui,server)"
  },
  {
    "objectID": "difusion_propia.html",
    "href": "difusion_propia.html",
    "title": "Difusión de nuestros resultados",
    "section": "",
    "text": "La difusión de la ciencia es de vital importancia.\nPor ello, nuestros lenguajes de programación disponen de múltiples herramientas para difundir el conocimiento que hemos creado. A continuación os presentaremos algunas de ellas."
  },
  {
    "objectID": "difusion_propia.html#presentaciones-de-resultados",
    "href": "difusion_propia.html#presentaciones-de-resultados",
    "title": "Difusión de nuestros resultados",
    "section": "Presentaciones de resultados",
    "text": "Presentaciones de resultados\nCuando debemos dar una charla, una conferencia o una ponencia nos solemos ayudar de una presentación. Nuestros lenguajes de programación permiten realizar presentaciones y exportarlas en los formatos que nosotros consideremos (PDF, Microsoft Power Point y html (interactivas en el ordenador)).\nA continuación os dejamos el ejemplo de una presentación en formato html:\n    View slides in full screen"
  },
  {
    "objectID": "Presentacion/presentación_ejemplo.html#bienvenido",
    "href": "Presentacion/presentación_ejemplo.html#bienvenido",
    "title": "Descubriendo R en Osakidetza",
    "section": "¡Bienvenido!",
    "text": "¡Bienvenido!\nEsto es una presentación de ejemplo."
  },
  {
    "objectID": "Presentacion/presentación_ejemplo.html#muchas-gracias",
    "href": "Presentacion/presentación_ejemplo.html#muchas-gracias",
    "title": "Descubriendo R en Osakidetza",
    "section": "¡Muchas gracias!",
    "text": "¡Muchas gracias!\n\n\n\n\n9 de abril de 2025. Descubriendo R"
  },
  {
    "objectID": "difusion_propia.html#difusión-en-pdf-latex",
    "href": "difusion_propia.html#difusión-en-pdf-latex",
    "title": "Difusión de nuestros resultados",
    "section": "Difusión en PDF (latex)",
    "text": "Difusión en PDF (latex)\nLa forma habitual sobre la que solemos realizar nuestras comunicaciones es en formato escrito, generalmente en formato PDF. Generalmente solemos hacer uso de programas de texto como es Microsoft Word.\nSin embargo, existe un tipo de escritura académica que genera texto en alta calidad conocido como Latex. Nuestros lenguajes de programación nos permiten crear y editar este tipo de escritura a través de otro lenguaje conocido como Markdown.\nA continuación os presentamos un ejemplo de ello:\n\n---\ntitle: \"Mi Documento LaTeX en R\"\nauthor: \"Tu Nombre\"\ndate: \"`r Sys.Date()`\"\noutput: pdf_document\n---\n\n# Introducción\n\nEste es un ejemplo de un documento LaTeX creado en R utilizando R Markdown. LaTeX es un sistema de composición de textos que permite crear documentos de alta calidad tipográfica[1].\n\n## Fórmulas matemáticas\n\nLaTeX es especialmente útil para escribir fórmulas matemáticas. Por ejemplo:\n\n\\[\n  E = mc^2\n\\]\n\n## Tablas\n\nTambién podemos crear tablas fácilmente:\n\n| Columna 1 | Columna 2 | Columna 3 |\n|-----------|-----------|-----------|\n| A         | B         | C         |\n| D         | E         | F         |"
  },
  {
    "objectID": "difusion_propia.html#paginas-web",
    "href": "difusion_propia.html#paginas-web",
    "title": "Difusión de nuestros resultados",
    "section": "Paginas web",
    "text": "Paginas web\nOtra forma de poder difundir tus resultados es la creación de páginas web que integren todo lo anterior. Esta propia página web se encuentra realizada de esta forma con Quarto; es por ello por lo que toda ella es un ejemplo de difusión de conocimiento con página web."
  },
  {
    "objectID": "difusion_externa.html",
    "href": "difusion_externa.html",
    "title": "Difusión de conocimiento",
    "section": "",
    "text": "Como hemos comentado, nuestros lenguajes de programación son de carácter abierto y colaborativo. Gracias a estos se han creado comunidades para la difusión del conocimiento a gran escala; formas de poder alojar y diseminar tu conocimiento. A continuación os vamos presentar algunas de esas iniciativas.\n\nOrganización Bookdown\nLa organización Bookdown permite alojar aquellos libros en formato html que hayas creado para poder difundirlos de forma totalmente gratuita.\n\n\nShinyapps.io\nLa plataforma Shinyapps.io se trata de un servicio donde poder alojar tus aplicaciones shiny para difundirlas a través de internet.\n\n\nGithub\nLa página web Github permite alojar tu código, colaborar con otras personas y alojar páginas web y aplicaciones.\n\n\nPosit cloud\nLa plataforma Posit Cloud permite trabajar con una versión de Rstudio online y de forma colaborativa.\n\n\n\n\n\nBookdown\n\n\n\n\n\n\n\nShinyappsio\n\n\n\n\n\n\n\nGithub\n\n\n\n\n\n\n\nPosit cloud\n\n\n\n\n\n\n\n\nComo puedes ver las posibilidades de los lenguajes de programación son infinitos\n\n\n(podríamos decir que el límite es tu imaginación 😉)\n\n\nAdemás promulgan el carácter abierto que la ciencia siempre debería tener"
  },
  {
    "objectID": "Presentacion/presentación_ejemplo.html",
    "href": "Presentacion/presentación_ejemplo.html",
    "title": "Descubriendo R en Osakidetza",
    "section": "",
    "text": "Esto es una presentación de ejemplo."
  },
  {
    "objectID": "ejemplo.html",
    "href": "ejemplo.html",
    "title": "Mi Documento LaTeX en R",
    "section": "",
    "text": "# Introducción\nEste es un ejemplo de un documento LaTeX creado en R utilizando R Markdown. LaTeX es un sistema de composición de textos que permite crear documentos de alta calidad tipográfica[1]."
  },
  {
    "objectID": "ejemplo.html#fórmulas-matemáticas",
    "href": "ejemplo.html#fórmulas-matemáticas",
    "title": "Mi Documento LaTeX en R",
    "section": "Fórmulas matemáticas",
    "text": "Fórmulas matemáticas\nLaTeX es especialmente útil para escribir fórmulas matemáticas. Por ejemplo:\n[ E = mc^2 ]"
  },
  {
    "objectID": "ejemplo.html#tablas",
    "href": "ejemplo.html#tablas",
    "title": "Mi Documento LaTeX en R",
    "section": "Tablas",
    "text": "Tablas\nTambién podemos crear tablas fácilmente:\n\n\n\nColumna 1\nColumna 2\nColumna 3\n\n\n\n\nA\nB\nC\n\n\nD\nE\nF"
  }
]